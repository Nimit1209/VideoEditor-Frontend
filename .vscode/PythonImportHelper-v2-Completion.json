[
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "styles",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "fluentui-emoji.scripts.check_assets",
        "description": "fluentui-emoji.scripts.check_assets",
        "peekOfCode": "def main():\n    ap = argparse.ArgumentParser()\n    ap.add_argument(\"assets\",\n                    help=\"Path to asset root folder\",\n                    type=Path)\n    opts = ap.parse_args()\n    errors = False\n    for jp in opts.assets.rglob(\"**/metadata.json\"):\n        folder = jp.parent\n        with open(jp, 'r') as jf:",
        "detail": "fluentui-emoji.scripts.check_assets",
        "documentation": {}
    },
    {
        "label": "SK_FOLDERS",
        "kind": 5,
        "importPath": "fluentui-emoji.scripts.check_assets",
        "description": "fluentui-emoji.scripts.check_assets",
        "peekOfCode": "SK_FOLDERS = {'Default',\n              'Light',\n              'Medium-Light',\n              'Medium',\n              'Medium-Dark',\n              'Dark'}\ndef main():\n    ap = argparse.ArgumentParser()\n    ap.add_argument(\"assets\",\n                    help=\"Path to asset root folder\",",
        "detail": "fluentui-emoji.scripts.check_assets",
        "documentation": {}
    },
    {
        "label": "groups",
        "kind": 5,
        "importPath": "fluentui-emoji.scripts.utils",
        "description": "fluentui-emoji.scripts.utils",
        "peekOfCode": "groups = [\n    'Objects',\n    'People & Body',\n    'Smileys & Emotion',\n    'Animals & Nature',\n    'Food & Drink',\n    'Symbols',\n    'Travel & Places',\n    'Activities',\n    'Flags',",
        "detail": "fluentui-emoji.scripts.utils",
        "documentation": {}
    },
    {
        "label": "styles",
        "kind": 5,
        "importPath": "fluentui-emoji.scripts.utils",
        "description": "fluentui-emoji.scripts.utils",
        "peekOfCode": "styles = [\"3D\", \"Color\", \"Flat\", \"High Contrast\"]",
        "detail": "fluentui-emoji.scripts.utils",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    }
]